{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure } from './user.actions';\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n\n  ;\n}\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    console.log({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    });\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n} //Sign Out\n\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n} // Sign Up\n\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    console.log('1', email, password, displayName);\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    console.log('2');\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\nexport function* signInAfterSignUp({\n  payload: {\n    user,\n    additionslData\n  }\n}) {\n  yield getSnapshotFromUserAuth(user, additionslData);\n}\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart), call(onSignUpSuccess)]);\n}","map":{"version":3,"sources":["C:/Users/naviy/My-first-project/first-online-shop/lesson-3/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpSuccess","signUpFailure","isUserAuthenticated","userAuth","getSnapshotFromUserAuth","error","additionalData","userRef","userSnapshot","get","console","log","id","data","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","signOut","onSignOutStart","SIGN_OUT_START","signUp","displayName","createUserWithEmailAndPassword","onSignUpStart","SIGN_UP_START","signInAfterSignUp","additionslData","onSignUpSuccess","SIGN_UP_SUCCESS","userSagas"],"mappings":"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","sourcesContent":["import {\r\n    takeLatest,\r\n    put,\r\n    all,\r\n    call\r\n} from 'redux-saga/effects';\r\n\r\nimport UserActionTypes from './user.types';\r\n\r\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\r\n\r\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure } from './user.actions';\r\n\r\n\r\nexport function* isUserAuthenticated() {\r\n    try {\r\n        const userAuth = yield getCurrentUser();\r\n        if (!userAuth) return;\r\n        yield getSnapshotFromUserAuth(userAuth);\r\n    } catch (error) {\r\n        yield put(signInFailure(error))\r\n    };\r\n}\r\n\r\n\r\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\r\n    try {\r\n        const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\r\n        const userSnapshot = yield userRef.get();\r\n        console.log({ id: userSnapshot.id, ...userSnapshot.data() });\r\n        yield put(\r\n            signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() })\r\n        );\r\n    } catch (error) {\r\n        yield put(signInFailure(error))\r\n    }\r\n}\r\n\r\nexport function* signInWithGoogle() {\r\n    try {\r\n        const { user } = yield auth.signInWithPopup(googleProvider);\r\n        yield getSnapshotFromUserAuth(user);\r\n    } catch (error) {\r\n        yield put(signInFailure(error));\r\n    }\r\n}\r\n\r\nexport function* signInWithEmail({ payload: { email, password } }) {\r\n    try {\r\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n        yield getSnapshotFromUserAuth(user);\r\n    } catch (error) {\r\n        yield put(signInFailure(error))\r\n    }\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\r\n}\r\n\r\nexport function* onEmailSignInStart() {\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\r\n}\r\n\r\nexport function* onCheckUserSession() {\r\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\r\n}\r\n\r\n//Sign Out\r\nexport function* signOut() {\r\n    try {\r\n        yield auth.signOut();\r\n        yield (put(signOutSuccess()))\r\n    } catch (error) {\r\n        yield put(signOutFailure(error))\r\n    }\r\n}\r\n\r\nexport function* onSignOutStart() {\r\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut)\r\n}\r\n// Sign Up\r\nexport function* signUp({ payload: { email, password, displayName } }) {\r\n    try {\r\n        console.log('1', email, password, displayName);\r\n\r\n        const { user } = yield auth.createUserWithEmailAndPassword(\r\n            email,\r\n            password\r\n        );\r\n        console.log('2');\r\n        yield put(signUpSuccess({ user, additionalData: { displayName } }))\r\n    } catch (error) {\r\n        yield put(signUpFailure(error))\r\n    }\r\n}\r\n\r\nexport function* onSignUpStart() {\r\n    yield takeLatest(UserActionTypes.SIGN_UP_START, signUp)\r\n}\r\n\r\nexport function* signInAfterSignUp({ payload: { user, additionslData } }) {\r\n    yield getSnapshotFromUserAuth(user, additionslData);\r\n}\r\n\r\nexport function* onSignUpSuccess() {\r\n    yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp)\r\n}\r\n\r\n\r\nexport function* userSagas() {\r\n    yield all([\r\n        call(onGoogleSignInStart),\r\n        call(onEmailSignInStart),\r\n        call(onCheckUserSession),\r\n        call(onSignOutStart),\r\n        call(onSignUpStart),\r\n        call(onSignUpSuccess)\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}